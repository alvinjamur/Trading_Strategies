{
    "contents" : "library(fpc)\n\nlibrary(cluster)\nlibrary(quantmod)\nlibrary(ggplot2)\nlibrary(PerformanceAnalytics)\n\n# read in data\n\ndata <- read.xls(\"index_shanghai.xls\")\n#colnames(data) <- c(\"Date\", \"GBP_JPY.Open\", \"GBP_JPY.High\", \"GBP_JPY.Low\", \"GBP_JPY.Close\") # quantmod requires these names\ndates <- as.POSIXct(data[, 1], format = \"%Y-%m-%d\")\ndata <- as.xts(data[, 2:6], order.by = dates)\n\ntrain_data <- data[\"2000::2014\", 1:4] # in-sample data set\n\nchart_Series(train_data)\n\n# create HLC relative to O\ntrain_data$HO <- train_data$high -train_data$open\ntrain_data$LO <- train_data$low -train_data$open\ntrain_data$CO <- train_data$close-train_data$open\ntrain_data$CL <- train_data$close - train_data$low\ntrain_data$HL <- train_data$high - train_data$low\ntrain_data$IBS <- train_data$CL / train_data$HL * 100\ntrain_data$IBS_1 <- lag(train_data$IBS, 1)\ntrain_data$IBS_2 <- lag(train_data$IBS, 2)\ntrain_data$IBS_3 <- lag(train_data$IBS, 3)\ntrain_data <- na.omit(train_data)\n\n\n\n# # K-Means Clustering with clusters based on HO, LO, CO\nclass_factors <- train_data[, 5:13]\n\n\nset.seed(123) # required in order to reproduce results\nfit <- kmeans(class_factors,6)\nm <- fit$cluster # vector of the cluster assigned to each candle\n\n# which canldes were classifed into each cluster?\ncluster <- as.xts(m)\nindex(cluster) <- index(train_data) #coerce index of cluster series to match data's index\nnew_data <- merge.xts(train_data, cluster)\n\n# plot candles by cluster\nchart_Series(xts(coredata(new_data)[order(new_data$cluster),],type=\"candlesticks\", order.by = index(new_data),  theme = chartTheme('black',up.col='green',dn.col='red')))\n\n# count and proportion of each cluster's occurrence in training data\nlibrary(plyr)\ncluster_count <- count(new_data, vars = \"cluster\")\ncluster_count$prop_percent <- cluster_count$freq*100/sum(cluster_count$freq)\nggplot(cluster_count, aes(x = cluster, y= prop_percent)) + geom_bar(stat = 'identity', fill = 'blue') + geom_line(stat = 'identity', colour = 'black') # plot as bars\n\n# proportaional probability table for next candle\ncount_table <- table(new_data$cluster , lag(new_data$cluster, 1))\nprop_table <- prop.table(table(new_data$cluster , lag(new_data$cluster, 1)), 1) * 100\nround(prop_table)\nprop_df <- data.frame(round(prop_table))\ncolnames(prop_df) <- c(\"Following_Cluster\", \"Cluster\", \"Proportion_percent\")\nggplot(prop_df, aes(x=Cluster, y=Proportion_percent, group=Following_Cluster)) + geom_line(aes(colour = Following_Cluster))\n\n# returns analysis\nnew_data$daily_returns <- dailyReturn(new_data)\nnew_data$cluster1 <- ifelse(new_data$cluster == 1, 1, 0)\nnew_data$cluster2 <- ifelse(new_data$cluster == 2, 1, 0)\nnew_data$cluster3 <- ifelse(new_data$cluster == 3, 1, 0)\nnew_data$cluster4 <- ifelse(new_data$cluster == 4, 1, 0)\nnew_data$cluster5 <- ifelse(new_data$cluster == 5, 1, 0)\nnew_data$cluster6 <- ifelse(new_data$cluster == 6, 1, 0)\n\ncluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns\ncluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns\ncluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns\ncluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns\ncluster5_returns <- lag(new_data$cluster5, 1) * new_data$daily_returns\ncluster6_returns <- lag(new_data$cluster6, 1) * new_data$daily_returns\n\n# comparitive performance of each cluster vs buy and hold\nchart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,], cluster5_returns[-1,], cluster6_returns[-1,]), legend.loc = \"bottomright\", main = \"Cumulative Returns\")\n\n# cluster 4 post-GFC\nchart.CumReturns(cbind(dailyReturn(new_data[\"200909::\"]), cluster1_returns[\"200909::\",]), legend.loc = \"bottomright\", main = \"Cumulative Returns\")\n\n###### apply k-menas to test set (2015)\n#test_data <- read.csv(\"GBP_JPY.csv\", stringsAsFactors = F)\n#colnames(test_data) <- c(\"Date\", \"GBP_JPY.Open\", \"GBP_JPY.High\", \"GBP_JPY.Low\", \"GBP_JPY.Close\") # quantmod requires these names\n#test_data$Date <- as.POSIXct(test_data$Date, format = \"%d/%m/%Y\")\n#test_data <- as.xts(test_data[, -1], order.by = test_data[, 1])\n#test_data <- test_data[\"2015\", 1:4] #nrow(data), 1:4]\n\ntest_data <- data[\"2015\", 1:4]\n\n# create HLC relative to O\ntest_data$HO <- test_data[,2]-test_data[,1]\ntest_data$LO <- test_data[,3]-test_data[,1]\ntest_data$CO <- test_data[,4]-test_data[,1]\n\ntest_data_kmeans <- data.frame(test_data[, 5:7]) # predict.kmeans seems to be incompatible with xts object\n\nlibrary(DeducerExtras)\ntest_clusters <- predict.kmeans(fit, data = test_data_kmeans)\ntest_data$cluster <- test_clusters\ntest_data$daily_returns <- dailyReturn(test_data)\ntest_data$cluster4 <- ifelse(test_data$cluster == 4, 1, 0)\ncluster4_test_returns <- lag(test_data$cluster4, 1) * test_data$daily_returns\n\n\n# comparitive performance of cluster 4 vs buy and hold\nchart.CumReturns(cbind(dailyReturn(test_data), cluster4_test_returns[-1, ]), legend.loc = \"bottomright\", main = \"Cumulative Returns\")\n\n\n\n\n",
    "created" : 1448613884264.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "1167685305",
    "id" : "1DF0C1B8",
    "lastKnownWriteTime" : 1,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}