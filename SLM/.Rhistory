delta <- cbind(delta, (data$close - data$low) / (data$high - data$low))
colnames(delta) <- ['co', 'ho', 'lo', 'hl', 'cl', 'ibs']
colnames(delta) <- {'co', 'ho', 'lo', 'hl', 'cl', 'ibs'}
colnames(delta) <- c('co', 'ho', 'lo', 'hl', 'cl', 'ibs')
head(delta)
data <- data['2000-01-01':, ]
data <- data['2000-01-01': ]
data['2001-01-01']
data['2001-01-01', :]
data['2001-01-01', ]
data['2001-01-01', 1:6]
data['2001-01-03', 1:6]
data['2001-01-03']
data['2001-01-03':]
data['2001-01-03'::]
data['2001-01-03':end]
data['2001-01-03':]
data <- read.csv("index_shanghai.csv", stringsAsFactors = F)
head(data)
data <- read.csv("index_shanghai.csv")
head(data)
data <- read.csv("index_shanghai.csv")
head(data)
data <- read.csv("index_shanghai.csv")
colnames(data) <- c("Date", "GBP_JPY.Open", "GBP_JPY.High", "GBP_JPY.Low", "GBP_JPY.Close") # quantmod requires these names
data$Date <- as.POSIXct(data$Date, format = "%d/%m/%Y")
data[,1]
data <- read.xls("index_shanghai.xls")
data
head(data)
data$Date <- as.POSIXct(data$Date, format = "%Y-%m-%d")
data$Date <- as.POSIXct(data[, 1], format = "%Y-%m-%d")
data
head(data)
data <- as.xts(data[, -1], order.by = data[, 1])
data <- as.xts(data[, -1], order.by = dates)
dates <- as.POSIXct(data[, 1], format = "%Y-%m-%d")
data <- as.xts(data[, -1], order.by = dates)
head(data)
data <- as.xts(data[, 2:6], order.by = dates)
data <- read.xls("index_shanghai.xls")
#colnames(data) <- c("Date", "GBP_JPY.Open", "GBP_JPY.High", "GBP_JPY.Low", "GBP_JPY.Close") # quantmod requires these names
dates <- as.POSIXct(data[, 1], format = "%Y-%m-%d")
data <- as.xts(data[, 2:6], order.by = dates)
head(data)
chart_Series(data)
library(fpc)
library(cluster)
library(quantmod)
library(ggplot2)
library(PerformanceAnalytics)
chart_Series(data)
?chart_Series
chart_Series(data)
head(data)
data <- data["2008::2014", 1:4] # in-sample data set
chart_Series(data)
# create HLC relative to O
data$HO <- data[,2]-data[,1]
data$LO <- data[,3]-data[,1]
data$CO <- data[,4]-data[,1]
# # K-Means Clustering with clusters based on HO, LO, CO
class_factors <- data[, 5:7]
class_factors
head(class_factors)
library(fpc)
library(cluster)
library(quantmod)
library(ggplot2)
library(PerformanceAnalytics)
# read in data
data <- read.xls("index_shanghai.xls")
#colnames(data) <- c("Date", "GBP_JPY.Open", "GBP_JPY.High", "GBP_JPY.Low", "GBP_JPY.Close") # quantmod requires these names
dates <- as.POSIXct(data[, 1], format = "%Y-%m-%d")
data <- as.xts(data[, 2:6], order.by = dates)
data <- data["2008::2014", 1:4] # in-sample data set
chart_Series(data)
# create HLC relative to O
data$HO <- data[,2]-data[,1]
data$LO <- data[,3]-data[,1]
data$CO <- data[,4]-data[,1]
# # K-Means Clustering with clusters based on HO, LO, CO
class_factors <- data[, 5:7]
set.seed(123) # required in order to reproduce results
fit <- kmeans(class_factors,4)
m <- fit$cluster # vector of the cluster assigned to each candle
# which canldes were classifed into each cluster?
cluster <- as.xts(m)
index(cluster) <- index(data) #coerce index of cluster series to match data's index
new_data <- merge.xts(data, cluster)
# plot candles by cluster
chart_Series(xts(coredata(sample_data)[order(sample_data$cluster),],type="candlesticks", order.by = index(sample_data),  theme = chartTheme('black',up.col='green',dn.col='red')))
# count and proportion of each cluster's occurrence in training data
library(plyr)
cluster_count <- count(new_data, vars = "cluster")
cluster_count$prop_percent <- cluster_count$freq*100/sum(cluster_count$freq)
ggplot(cluster_count, aes(x = cluster, y= prop_percent)) + geom_bar(stat = 'identity', fill = 'blue') + geom_line(stat = 'identity', colour = 'black') # plot as bars
# proportaional probability table for next candle
count_table <- table(new_data$cluster , lag(new_data$cluster, 1))
prop_table <- prop.table(table(new_data$cluster , lag(new_data$cluster, 1)), 1) * 100
round(prop_table)
prop_df <- data.frame(round(prop_table))
colnames(prop_df) <- c("Following_Cluster", "Cluster", "Proportion_percent")
ggplot(prop_df, aes(x=Cluster, y=Proportion_percent, group=Following_Cluster)) + geom_line(aes(colour = Following_Cluster))
# returns analysis
new_data$daily_returns <- dailyReturn(new_data)
new_data$cluster1 <- ifelse(new_data$cluster == 1, 1, 0)
new_data$cluster2 <- ifelse(new_data$cluster == 2, 1, 0)
new_data$cluster3 <- ifelse(new_data$cluster == 3, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 4, 1, 0)
cluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns
cluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns
cluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns
# comparitive performance of each cluster vs buy and hold
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
# cluster 4 post-GFC
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster4_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
###### apply k-menas to test set (2015)
test_data <- read.csv("GBP_JPY.csv", stringsAsFactors = F)
colnames(test_data) <- c("Date", "GBP_JPY.Open", "GBP_JPY.High", "GBP_JPY.Low", "GBP_JPY.Close") # quantmod requires these names
test_data$Date <- as.POSIXct(test_data$Date, format = "%d/%m/%Y")
test_data <- as.xts(test_data[, -1], order.by = test_data[, 1])
test_data <- test_data["2015", 1:4] #nrow(data), 1:4]
# create HLC relative to O
test_data$HO <- test_data[,2]-test_data[,1]
test_data$LO <- test_data[,3]-test_data[,1]
test_data$CO <- test_data[,4]-test_data[,1]
test_data_kmeans <- data.frame(test_data[, 5:7]) # predict.kmeans seems to be incompatible with xts object
library(DeducerExtras)
test_clusters <- predict.kmeans(fit, data = test_data_kmeans)
test_data$cluster <- test_clusters
test_data$daily_returns <- dailyReturn(test_data)
test_data$cluster4 <- ifelse(test_data$cluster == 4, 1, 0)
cluster4_test_returns <- lag(test_data$cluster4, 1) * test_data$daily_returns
# comparitive performance of cluster 4 vs buy and hold
chart.CumReturns(cbind(dailyReturn(test_data), cluster4_test_returns[-1, ]), legend.loc = "bottomright", main = "Cumulative Returns")
data <- read.xls("index_shanghai.xls")
#colnames(data) <- c("Date", "GBP_JPY.Open", "GBP_JPY.High", "GBP_JPY.Low", "GBP_JPY.Close") # quantmod requires these names
dates <- as.POSIXct(data[, 1], format = "%Y-%m-%d")
data <- as.xts(data[, 2:6], order.by = dates)
train_data <- data["2008::2014", 1:4] # in-sample data set
chart_Series(train_data)
# create HLC relative to O
train_data$HO <- train_data[,2]-train_data[,1]
train_data$LO <- train_data[,3]-train_data[,1]
train_data$CO <- train_data[,4]-train_data[,1]
# # K-Means Clustering with clusters based on HO, LO, CO
class_factors <- train_data[, 5:7]
set.seed(123) # required in order to reproduce results
fit <- kmeans(class_factors,4)
m <- fit$cluster # vector of the cluster assigned to each candle
# which canldes were classifed into each cluster?
cluster <- as.xts(m)
index(cluster) <- index(train_data) #coerce index of cluster series to match data's index
new_data <- merge.xts(train_data, cluster)
# plot candles by cluster
chart_Series(xts(coredata(sample_data)[order(sample_data$cluster),],type="candlesticks", order.by = index(sample_data),  theme = chartTheme('black',up.col='green',dn.col='red')))
chart_Series(xts(coredata(new_data)[order(new_data$cluster),],type="candlesticks", order.by = index(new_data),  theme = chartTheme('black',up.col='green',dn.col='red')))
# count and proportion of each cluster's occurrence in training data
library(plyr)
cluster_count <- count(new_data, vars = "cluster")
cluster_count$prop_percent <- cluster_count$freq*100/sum(cluster_count$freq)
ggplot(cluster_count, aes(x = cluster, y= prop_percent)) + geom_bar(stat = 'identity', fill = 'blue') + geom_line(stat = 'identity', colour = 'black') # plot as bars
# proportaional probability table for next candle
count_table <- table(new_data$cluster , lag(new_data$cluster, 1))
prop_table <- prop.table(table(new_data$cluster , lag(new_data$cluster, 1)), 1) * 100
round(prop_table)
prop_df <- data.frame(round(prop_table))
colnames(prop_df) <- c("Following_Cluster", "Cluster", "Proportion_percent")
ggplot(prop_df, aes(x=Cluster, y=Proportion_percent, group=Following_Cluster)) + geom_line(aes(colour = Following_Cluster))
# returns analysis
new_data$daily_returns <- dailyReturn(new_data)
new_data$cluster1 <- ifelse(new_data$cluster == 1, 1, 0)
new_data$cluster2 <- ifelse(new_data$cluster == 2, 1, 0)
new_data$cluster3 <- ifelse(new_data$cluster == 3, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 4, 1, 0)
cluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns
cluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns
cluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns
# comparitive performance of each cluster vs buy and hold
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
# cluster 4 post-GFC
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster4_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
###### apply k-menas to test set (2015)
#test_data <- read.csv("GBP_JPY.csv", stringsAsFactors = F)
#colnames(test_data) <- c("Date", "GBP_JPY.Open", "GBP_JPY.High", "GBP_JPY.Low", "GBP_JPY.Close") # quantmod requires these names
#test_data$Date <- as.POSIXct(test_data$Date, format = "%d/%m/%Y")
#test_data <- as.xts(test_data[, -1], order.by = test_data[, 1])
#test_data <- test_data["2015", 1:4] #nrow(data), 1:4]
test_data <- data["2015", 1:4]
# create HLC relative to O
test_data$HO <- test_data[,2]-test_data[,1]
test_data$LO <- test_data[,3]-test_data[,1]
test_data$CO <- test_data[,4]-test_data[,1]
test_data_kmeans <- data.frame(test_data[, 5:7]) # predict.kmeans seems to be incompatible with xts object
library(DeducerExtras)
test_clusters <- predict.kmeans(fit, data = test_data_kmeans)
test_data$cluster <- test_clusters
test_data <- data["2015", 1:4]
# create HLC relative to O
test_data$HO <- test_data[,2]-test_data[,1]
test_data$LO <- test_data[,3]-test_data[,1]
test_data$CO <- test_data[,4]-test_data[,1]
test_data_kmeans <- data.frame(test_data[, 5:7]) # predict.kmeans seems to be incompatible with xts object
library(DeducerExtras)
test_clusters <- predict.kmeans(fit, data = test_data_kmeans)
install.packages('DeducerExtras')
install.packages('DeducerExtras')
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
train_data <- data["2000::2014", 1:4] # in-sample data set
chart_Series(train_data)
# create HLC relative to O
train_data$HO <- train_data[,2]-train_data[,1]
train_data$LO <- train_data[,3]-train_data[,1]
train_data$CO <- train_data[,4]-train_data[,1]
# # K-Means Clustering with clusters based on HO, LO, CO
class_factors <- train_data[, 5:7]
set.seed(123) # required in order to reproduce results
fit <- kmeans(class_factors,4)
m <- fit$cluster # vector of the cluster assigned to each candle
# which canldes were classifed into each cluster?
cluster <- as.xts(m)
index(cluster) <- index(train_data) #coerce index of cluster series to match data's index
new_data <- merge.xts(train_data, cluster)
# plot candles by cluster
chart_Series(xts(coredata(new_data)[order(new_data$cluster),],type="candlesticks", order.by = index(new_data),  theme = chartTheme('black',up.col='green',dn.col='red')))
# count and proportion of each cluster's occurrence in training data
library(plyr)
cluster_count <- count(new_data, vars = "cluster")
cluster_count$prop_percent <- cluster_count$freq*100/sum(cluster_count$freq)
ggplot(cluster_count, aes(x = cluster, y= prop_percent)) + geom_bar(stat = 'identity', fill = 'blue') + geom_line(stat = 'identity', colour = 'black') # plot as bars
# proportaional probability table for next candle
count_table <- table(new_data$cluster , lag(new_data$cluster, 1))
prop_table <- prop.table(table(new_data$cluster , lag(new_data$cluster, 1)), 1) * 100
round(prop_table)
prop_df <- data.frame(round(prop_table))
colnames(prop_df) <- c("Following_Cluster", "Cluster", "Proportion_percent")
ggplot(prop_df, aes(x=Cluster, y=Proportion_percent, group=Following_Cluster)) + geom_line(aes(colour = Following_Cluster))
# returns analysis
new_data$daily_returns <- dailyReturn(new_data)
new_data$cluster1 <- ifelse(new_data$cluster == 1, 1, 0)
new_data$cluster2 <- ifelse(new_data$cluster == 2, 1, 0)
new_data$cluster3 <- ifelse(new_data$cluster == 3, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 4, 1, 0)
cluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns
cluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns
cluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns
# comparitive performance of each cluster vs buy and hold
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
fit <- kmeans(class_factors,6)
m <- fit$cluster # vector of the cluster assigned to each candle
m
# which canldes were classifed into each cluster?
cluster <- as.xts(m)
index(cluster) <- index(train_data) #coerce index of cluster series to match data's index
new_data <- merge.xts(train_data, cluster)
# plot candles by cluster
chart_Series(xts(coredata(new_data)[order(new_data$cluster),],type="candlesticks", order.by = index(new_data),  theme = chartTheme('black',up.col='green',dn.col='red')))
# count and proportion of each cluster's occurrence in training data
library(plyr)
cluster_count <- count(new_data, vars = "cluster")
cluster_count$prop_percent <- cluster_count$freq*100/sum(cluster_count$freq)
ggplot(cluster_count, aes(x = cluster, y= prop_percent)) + geom_bar(stat = 'identity', fill = 'blue') + geom_line(stat = 'identity', colour = 'black') # plot as bars
# proportaional probability table for next candle
count_table <- table(new_data$cluster , lag(new_data$cluster, 1))
prop_table <- prop.table(table(new_data$cluster , lag(new_data$cluster, 1)), 1) * 100
round(prop_table)
prop_df <- data.frame(round(prop_table))
colnames(prop_df) <- c("Following_Cluster", "Cluster", "Proportion_percent")
ggplot(prop_df, aes(x=Cluster, y=Proportion_percent, group=Following_Cluster)) + geom_line(aes(colour = Following_Cluster))
# returns analysis
new_data$daily_returns <- dailyReturn(new_data)
new_data$daily_returns <- dailyReturn(new_data)
new_data$cluster1 <- ifelse(new_data$cluster == 1, 1, 0)
new_data$cluster2 <- ifelse(new_data$cluster == 2, 1, 0)
new_data$cluster3 <- ifelse(new_data$cluster == 3, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 4, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 5, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 6, 1, 0)
cluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns
cluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns
cluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster5, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster6, 1) * new_data$daily_returns
new_data$daily_returns <- dailyReturn(new_data)
new_data$cluster1 <- ifelse(new_data$cluster == 1, 1, 0)
new_data$cluster2 <- ifelse(new_data$cluster == 2, 1, 0)
new_data$cluster3 <- ifelse(new_data$cluster == 3, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 4, 1, 0)
new_data$cluster5 <- ifelse(new_data$cluster == 5, 1, 0)
new_data$cluster6 <- ifelse(new_data$cluster == 6, 1, 0)
cluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns
cluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns
cluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster5, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster6, 1) * new_data$daily_returns
# comparitive performance of each cluster vs buy and hold
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,],
cluster4_returns[-1,]), cluster5_returns[-1,]), cluster6_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,]), cluster5_returns[-1,]), cluster6_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
cluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns
cluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns
cluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns
cluster5_returns <- lag(new_data$cluster5, 1) * new_data$daily_returns
cluster6_returns <- lag(new_data$cluster6, 1) * new_data$daily_returns
# comparitive performance of each cluster vs buy and hold
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,]), cluster5_returns[-1,]), cluster6_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,], cluster5_returns[-1,], cluster6_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
head(train_data)
train_data$open
train_data$HO <- train_data$high -train_data$open
head(train_data)
train_data$HO <- train_data$high -train_data$open
train_data$LO <- train_data$low -train_data$open
train_data$CO <- train_data$close-train_data$open
train_data$CL <- train_data$close - train_data$low
train_data$HL <- train_data$high - train_data$low
train_data$IBS <- train_data$CL / train_data$HL
head(train_data)
train_data$IBS <- train_data$CL / train_data$HL * 100
class_factors <- train_data[, 5:10]
set.seed(123) # required in order to reproduce results
fit <- kmeans(class_factors,6)
m <- fit$cluster # vector of the cluster assigned to each candle
# which canldes were classifed into each cluster?
cluster <- as.xts(m)
index(cluster) <- index(train_data) #coerce index of cluster series to match data's index
new_data <- merge.xts(train_data, cluster)
# plot candles by cluster
chart_Series(xts(coredata(new_data)[order(new_data$cluster),],type="candlesticks", order.by = index(new_data),  theme = chartTheme('black',up.col='green',dn.col='red')))
# count and proportion of each cluster's occurrence in training data
library(plyr)
cluster_count <- count(new_data, vars = "cluster")
cluster_count$prop_percent <- cluster_count$freq*100/sum(cluster_count$freq)
ggplot(cluster_count, aes(x = cluster, y= prop_percent)) + geom_bar(stat = 'identity', fill = 'blue') + geom_line(stat = 'identity', colour = 'black') # plot as bars
# proportaional probability table for next candle
count_table <- table(new_data$cluster , lag(new_data$cluster, 1))
prop_table <- prop.table(table(new_data$cluster , lag(new_data$cluster, 1)), 1) * 100
round(prop_table)
prop_df <- data.frame(round(prop_table))
colnames(prop_df) <- c("Following_Cluster", "Cluster", "Proportion_percent")
ggplot(prop_df, aes(x=Cluster, y=Proportion_percent, group=Following_Cluster)) + geom_line(aes(colour = Following_Cluster))
# returns analysis
new_data$daily_returns <- dailyReturn(new_data)
new_data$cluster1 <- ifelse(new_data$cluster == 1, 1, 0)
new_data$cluster2 <- ifelse(new_data$cluster == 2, 1, 0)
new_data$cluster3 <- ifelse(new_data$cluster == 3, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 4, 1, 0)
new_data$cluster5 <- ifelse(new_data$cluster == 5, 1, 0)
new_data$cluster6 <- ifelse(new_data$cluster == 6, 1, 0)
cluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns
cluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns
cluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns
cluster5_returns <- lag(new_data$cluster5, 1) * new_data$daily_returns
cluster6_returns <- lag(new_data$cluster6, 1) * new_data$daily_returns
# comparitive performance of each cluster vs buy and hold
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,], cluster5_returns[-1,], cluster6_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
# cluster 4 post-GFC
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster4_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,], cluster5_returns[-1,], cluster6_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster1_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster2_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster3_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster4_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster5_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster6_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
fit <- kmeans(class_factors,8)
m <- fit$cluster # vector of the cluster assigned to each candle
# which canldes were classifed into each cluster?
cluster <- as.xts(m)
index(cluster) <- index(train_data) #coerce index of cluster series to match data's index
new_data <- merge.xts(train_data, cluster)
# plot candles by cluster
chart_Series(xts(coredata(new_data)[order(new_data$cluster),],type="candlesticks", order.by = index(new_data),  theme = chartTheme('black',up.col='green',dn.col='red')))
# count and proportion of each cluster's occurrence in training data
library(plyr)
cluster_count <- count(new_data, vars = "cluster")
cluster_count$prop_percent <- cluster_count$freq*100/sum(cluster_count$freq)
ggplot(cluster_count, aes(x = cluster, y= prop_percent)) + geom_bar(stat = 'identity', fill = 'blue') + geom_line(stat = 'identity', colour = 'black') # plot as bars
# proportaional probability table for next candle
count_table <- table(new_data$cluster , lag(new_data$cluster, 1))
prop_table <- prop.table(table(new_data$cluster , lag(new_data$cluster, 1)), 1) * 100
round(prop_table)
prop_df <- data.frame(round(prop_table))
colnames(prop_df) <- c("Following_Cluster", "Cluster", "Proportion_percent")
ggplot(prop_df, aes(x=Cluster, y=Proportion_percent, group=Following_Cluster)) + geom_line(aes(colour = Following_Cluster))
# returns analysis
new_data$daily_returns <- dailyReturn(new_data)
new_data$cluster1 <- ifelse(new_data$cluster == 1, 1, 0)
new_data$cluster2 <- ifelse(new_data$cluster == 2, 1, 0)
new_data$cluster3 <- ifelse(new_data$cluster == 3, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 4, 1, 0)
new_data$cluster5 <- ifelse(new_data$cluster == 5, 1, 0)
new_data$cluster6 <- ifelse(new_data$cluster == 6, 1, 0)
cluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns
cluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns
cluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns
cluster5_returns <- lag(new_data$cluster5, 1) * new_data$daily_returns
cluster6_returns <- lag(new_data$cluster6, 1) * new_data$daily_returns
# comparitive performance of each cluster vs buy and hold
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,], cluster5_returns[-1,], cluster6_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
# cluster 4 post-GFC
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster6_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster5_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster4_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster3_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster2_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster1_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
fit <- kmeans(class_factors,6)
m <- fit$cluster # vector of the cluster assigned to each candle
# which canldes were classifed into each cluster?
cluster <- as.xts(m)
index(cluster) <- index(train_data) #coerce index of cluster series to match data's index
new_data <- merge.xts(train_data, cluster)
# plot candles by cluster
chart_Series(xts(coredata(new_data)[order(new_data$cluster),],type="candlesticks", order.by = index(new_data),  theme = chartTheme('black',up.col='green',dn.col='red')))
# count and proportion of each cluster's occurrence in training data
library(plyr)
cluster_count <- count(new_data, vars = "cluster")
cluster_count$prop_percent <- cluster_count$freq*100/sum(cluster_count$freq)
ggplot(cluster_count, aes(x = cluster, y= prop_percent)) + geom_bar(stat = 'identity', fill = 'blue') + geom_line(stat = 'identity', colour = 'black') # plot as bars
# proportaional probability table for next candle
count_table <- table(new_data$cluster , lag(new_data$cluster, 1))
prop_table <- prop.table(table(new_data$cluster , lag(new_data$cluster, 1)), 1) * 100
round(prop_table)
prop_df <- data.frame(round(prop_table))
colnames(prop_df) <- c("Following_Cluster", "Cluster", "Proportion_percent")
ggplot(prop_df, aes(x=Cluster, y=Proportion_percent, group=Following_Cluster)) + geom_line(aes(colour = Following_Cluster))
# returns analysis
new_data$daily_returns <- dailyReturn(new_data)
new_data$cluster1 <- ifelse(new_data$cluster == 1, 1, 0)
new_data$cluster2 <- ifelse(new_data$cluster == 2, 1, 0)
new_data$cluster3 <- ifelse(new_data$cluster == 3, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 4, 1, 0)
new_data$cluster5 <- ifelse(new_data$cluster == 5, 1, 0)
new_data$cluster6 <- ifelse(new_data$cluster == 6, 1, 0)
cluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns
cluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns
cluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns
cluster5_returns <- lag(new_data$cluster5, 1) * new_data$daily_returns
cluster6_returns <- lag(new_data$cluster6, 1) * new_data$daily_returns
# comparitive performance of each cluster vs buy and hold
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,], cluster5_returns[-1,], cluster6_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
# cluster 4 post-GFC
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster1_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster6_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster5_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster6_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
train_data$HO <- train_data$high -train_data$open
train_data$LO <- train_data$low -train_data$open
train_data$CO <- train_data$close-train_data$open
train_data$CL <- train_data$close - train_data$low
train_data$HL <- train_data$high - train_data$low
train_data$IBS <- train_data$CL / train_data$HL * 100
train_data$IBS_1 <- lag(train_data$IBS, 1)
train_data$IBS_2 <- lag(train_data$IBS, 2)
train_data$IBS_3 <- lag(train_data$IBS, 3)
train_data <- na.omit(train_data)
class_factors <- train_data[, 5:13]
set.seed(123) # required in order to reproduce results
fit <- kmeans(class_factors,6)
m <- fit$cluster # vector of the cluster assigned to each candle
# which canldes were classifed into each cluster?
cluster <- as.xts(m)
index(cluster) <- index(train_data) #coerce index of cluster series to match data's index
new_data <- merge.xts(train_data, cluster)
# plot candles by cluster
chart_Series(xts(coredata(new_data)[order(new_data$cluster),],type="candlesticks", order.by = index(new_data),  theme = chartTheme('black',up.col='green',dn.col='red')))
# count and proportion of each cluster's occurrence in training data
library(plyr)
cluster_count <- count(new_data, vars = "cluster")
cluster_count$prop_percent <- cluster_count$freq*100/sum(cluster_count$freq)
ggplot(cluster_count, aes(x = cluster, y= prop_percent)) + geom_bar(stat = 'identity', fill = 'blue') + geom_line(stat = 'identity', colour = 'black') # plot as bars
# proportaional probability table for next candle
count_table <- table(new_data$cluster , lag(new_data$cluster, 1))
prop_table <- prop.table(table(new_data$cluster , lag(new_data$cluster, 1)), 1) * 100
round(prop_table)
prop_df <- data.frame(round(prop_table))
colnames(prop_df) <- c("Following_Cluster", "Cluster", "Proportion_percent")
ggplot(prop_df, aes(x=Cluster, y=Proportion_percent, group=Following_Cluster)) + geom_line(aes(colour = Following_Cluster))
# returns analysis
new_data$daily_returns <- dailyReturn(new_data)
new_data$cluster1 <- ifelse(new_data$cluster == 1, 1, 0)
new_data$cluster2 <- ifelse(new_data$cluster == 2, 1, 0)
new_data$cluster3 <- ifelse(new_data$cluster == 3, 1, 0)
new_data$cluster4 <- ifelse(new_data$cluster == 4, 1, 0)
new_data$cluster5 <- ifelse(new_data$cluster == 5, 1, 0)
new_data$cluster6 <- ifelse(new_data$cluster == 6, 1, 0)
cluster1_returns <- lag(new_data$cluster1, 1) * new_data$daily_returns
cluster2_returns <- lag(new_data$cluster2, 1) * new_data$daily_returns
cluster3_returns <- lag(new_data$cluster3, 1) * new_data$daily_returns
cluster4_returns <- lag(new_data$cluster4, 1) * new_data$daily_returns
cluster5_returns <- lag(new_data$cluster5, 1) * new_data$daily_returns
cluster6_returns <- lag(new_data$cluster6, 1) * new_data$daily_returns
# comparitive performance of each cluster vs buy and hold
chart.CumReturns(cbind(dailyReturn(new_data), cluster1_returns[-1,], cluster2_returns[-1,], cluster3_returns[-1,], cluster4_returns[-1,], cluster5_returns[-1,], cluster6_returns[-1,]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster6_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster5_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster4_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster3_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster32_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster2_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
chart.CumReturns(cbind(dailyReturn(new_data["200909::"]), cluster1_returns["200909::",]), legend.loc = "bottomright", main = "Cumulative Returns")
