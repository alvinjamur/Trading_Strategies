{
    "contents" : "source(\"gmmhmm.R\")\n\n\n## 测试中证500\n########################################################################\n## 0. 读取指数数据\nload_data <- function()\n{\n  data <- read.csv(\"data/NAV_5ETFs_updated.csv\")\n  benchmark <- na.omit(as.xts(data[, 2:6], order.by=strptime(data[,1], format=\"%Y/%m/%d\", tz=\"\")))\n  benchmark_ret <- na.omit(Return.calculate(benchmark, method = \"discrete\"))\n  \n  d <- list();\n  d[[1]] <- benchmark;\n  d[[2]] <- benchmark_ret;\n  return (d);\n}\nload_data()\n\n\n\n## out-of-sample test for 中证500\n#######################################\nsource(\"gmmhmm.R\")\nzz500 <- benchmark[, 1]\nhs300 <- benchmark[, 2]\nspx <- benchmark[, 3]\ngold <- benchmark[, 4]\nhengsheng <- benchmark[, 5]\n\nret_zz500_d <-  TTR::ROC(zz500, n=1, \"discrete\")\nret_zz500_2d <- TTR::ROC(zz500, n=2, \"discrete\")\nret_zz500_2d <- na.omit(zz500 / lag(zz500, 2) - 1)\nret_zz500_5d <- na.omit(zz500 / lag(zz500, 5) - 1)\nret_zz500_20d <- na.omit(zz500 / lag(zz500, 10) - 1)\n\nret_hs300_d <- na.omit(hs300 / lag(hs300, 1) - 1)\nret_hs300_2d <- na.omit(hs300 / lag(hs300, 2) - 1)\nret_hs300_5d <- na.omit(hs300 / lag(hs300, 5) - 1)\nret_hs300_20d <- na.omit(hs300 / lag(hs300, 20) - 1)\n\n\nzz500_w <- zz500[endpoints(zz500, on = \"weeks\")]\nhs500_w <- hs300[endpoints(hs300, on = \"weeks\")]\n\nret_zz500_w <- na.omit(zz500_w / lag(zz500_w, 1) - 1)\nret_zz500_w_5d <- na.omit(zz500_w / lag(zz500_w, 5) - 1)\n\nret_zz500_spread <- ret_zz500_d - lag(ret_zz500_d, 1);\n\n\n## Testing out-of-sample for 5ETF portfolio returns\n########################################################\nsource(\"gmmhmm.R\")\ndata <- read.csv(\"data/portfolio_5etfs_ret_0.0008_weekly.csv\")\nbenchmark <- na.omit(as.xts(data[, 2:7], order.by=strptime(data[,1], format=\"%Y-%m-%d\", tz=\"\")))\nportfolio <- benchmark[, 1]\n\ndata_1 <- cbind(portfolio, lag(portfolio, 1), lag(portfolio, 5))\ndata_1 <- na.omit(data_1)\nret <- gmmhmm1(dataset=data_1, ret_target=data_1[, 1], n_start=1000, n_state = 5)\n\n\n\n\n#######################################################\ntest_oot3 <- function() {\n  data <- read.csv(\"data/NAV_5ETFs_updated.csv\")\n  benchmark <- na.omit(as.xts(data[, 2:6], order.by=strptime(data[,1], format=\"%Y/%m/%d\", tz=\"\")))\n  benchmark_ret <- na.omit(Return.calculate(benchmark, method = \"discrete\"))\n  \n  zz500 <- benchmark[, 1]\n  hs300 <- benchmark[, 2]\n  spx <- benchmark[, 3]\n  gold <- benchmark[, 4]\n  hengsheng <- benchmark[, 5]\n  \n  ret_zz500_d <-  TTR::ROC(zz500, n=1, \"discrete\")\n  ret_zz500_2d <- TTR::ROC(zz500, n=2, \"discrete\")\n  ret_zz500_2d <- na.omit(zz500 / lag(zz500, 2) - 1)\n  ret_zz500_5d <- na.omit(zz500 / lag(zz500, 5) - 1)\n  ret_zz500_20d <- na.omit(zz500 / lag(zz500, 10) - 1)\n  \n  ret_hs300_d <- na.omit(hs300 / lag(hs300, 1) - 1)\n  ret_hs300_2d <- na.omit(hs300 / lag(hs300, 2) - 1)\n  ret_hs300_5d <- na.omit(hs300 / lag(hs300, 5) - 1)\n  ret_hs300_20d <- na.omit(hs300 / lag(hs300, 20) - 1)\n  \n  \n  zz500_w <- zz500[endpoints(zz500, on = \"weeks\")]\n  hs500_w <- hs300[endpoints(hs300, on = \"weeks\")]\n  \n  ret_zz500_w <- na.omit(zz500_w / lag(zz500_w, 1) - 1)\n  ret_zz500_w_5d <- na.omit(zz500_w / lag(zz500_w, 5) - 1)\n  \n  ret_zz500_spread <- ret_zz500_d - lag(ret_zz500_d, 1);\n  \n  \n  \n  source(\"gmmhmm.R\")\n  data_oot3 <- cbind.xts( TTR::ROC(zz500, n = 1),\n                          TTR::ROC(zz500, n = 2), \n                          TTR::ROC(hs300, n = 2)\n    )\n  data_oot3 <- na.omit(data_oot3[is.infinite(data_oot3[,1]) == FALSE]);\n  #ret <- gmmhmm2(dataset=data_oot3, ret_target=ret_zz500_d[index(data_oot3)], n_start=1000, n_state=5)\n  \n  dataset=data_oot3\n  ret_target=ret_zz500_d[index(data_oot3)]\n  n_start=1000\n  n_state=5\n  \n  n <- nrow(dataset) \n  ret_s1 <- ret_target * 0;\n  for (i in n_start:n) {\n    data_training <- dataset[(i - n_start + 1):i,];\n    \n    #### Using Mixture Model to determine the optimal number of regimes and the settings under \n    #### each regime\n    if (n_state == 0) {\n      mm_model <- Mclust(data_training) }\n    else {\n      mm_model <- Mclust(data_training, G = n_state)}\n    mm_output <- summary(mm_model)\n    \n    #### creating the HMM model\n    J <- mm_output$G\n    print(paste(\"Nr of Regimes \", J))\n    initial <- rep(1/J, J)\n    P <- matrix(rep(1/J, J*J), nrow=J)\n    mean <- list()\n    vcv <- list()\n    for (j in 1:J){\n      mean[[j]] <- mm_output$mean[, j]\n      vcv[[j]] <- mm_output$variance[,,j]\n    }\n    b <- list()\n    b$mu <- mean\n    b$sigma <- vcv\n    \n    #### training HMM model\n    \n    hmm_model <- hmmspec(init=initial, trans=P, parms.emission = b, dens.emission =dmvnorm.hsmm)\n    hmm_fitted <- hmmfit(data_training, hmm_model, mstep = mstep.mvnorm)\n    print(\"hmm fitting\")\n    #### Predict future regime\n    regime <- tail(hmm_fitted$yhat, 1);\n    \n    \n    ############################################################\n    #### In the training set, the regimes and returns\n    yhat_train <- as.xts(hmm_fitted$yhat, order.by = index(data_training), tzone=tzone(data_training))\n    ret_training_regime <- list()\n    for (k in 1:J) {\n      ret_training_regime[[k]] <- data_training[,1] * (yhat_train == k)\n    }\n    ret_training_regime <- do.call(cbind, ret_training_regime)\n    \n    ### calculate the risk measures \n    sharpe_training_regime_vol <- SharpeRatio(ret_training_regime)[1,]\n    max_sharpe_regime <- match(max(sharpe_training_regime_vol), sharpe_training_regime_vol)\n    #calmar_training_regime <- CalmarRatio(ret_training_regime)\n    #max_calmar_regime <- match(max(calmar_training_regime), calmar_training_regime)\n    #sortino_training_regime <- SortinoRatio(ret_training_regime)\n    #max_sortino_regime <- match(max(sortino_training_regime), sortino_training_regime)\n    ret_training_regime <- mean.geometric(ret_training_regime)\n    \n    max_order = sort(sharpe_training_regime_vol, index.return=TRUE, decreasing=TRUE)\n    max_order = max_order$ix\n    \n    top_regime1 <- max_order[1];\n    top_regime2 <- max_order[2];\n    \n    ret_avg_regime1 <- ret_training_regime[top_regime1]\n    ret_avg_regime2 <- ret_training_regime[top_regime2]\n    \n    \n    ##################################\n    #signal <- gmm_hmm_strategy(data_training, data_test, ret_target);\n    \n    \n    last_ret <- ret_target[i];\n    next_ret <- ret_target[i+1];\n    \n    #selected_ret <- next_ret * (sharpe_training_regime_vol[regime] > 0)\n    \n    selected_ret <- next_ret * ((regime == top_regime1 & ret_avg_regime1 > 0) | \n                                  (regime == top_regime2 & ret_avg_regime2 > 0))\n    #selected_ret <- next_ret * ((regime == top_regime1 & ret_avg_regime1 > 0) )\n    \n    #selected_ret <- next_ret * (regime == top_regime1 | regime == top_regime2)\n    #selected_ret <- next_ret * (regime == top_regime1)\n    ret_s1[i+1] <- selected_ret\n    \n    print(paste(\"target regime = \", top_regime1));\n    print(paste(\"target regime = \", top_regime2));\n    print(paste(\"current regime = \", regime, \": date = \", as.character(index(ret_target[i]))));\n    print(paste(\"prev ret =\", last_ret, \n                \": next ret =\", next_ret, \": selected_ret = \", selected_ret));\n    print(paste(\"cumulative ret=\", sum(ret_s1)))\n    \n    if (i >= (n_start+10)){\n      ret_c <- cbind(ret_s1[(n_start):(i+1)], ret_target[(n_start):(i+1)])\n      charts.PerformanceSummary(ret_c)\n      \n      #save(ret_c, \"ret_c.data\")\n      \n    }\n    print(paste(\"i=\", i))\n  }\n  \n  ret_c <- cbind(ret_s1[n_start:n,], ret_target[n_start:n,])\n  #rbind(table.AnnualizedReturns(ret_c), maxDrawdown(ret_c), CalmarRatio(ret_c))\n  return(ret_c)\n  \n  \n}\n\n\ntest_oot3\n\n\n\ntest_oot4 <- function() {\n  source(\"gmmhmm.R\")\n  data_oot4 <- cbind.xts( TTR::ROC(zz500, n = 1),\n                          TTR::ROC(zz500, n = 2) / 2, \n                          TTR::ROC(hs300, n = 2) / 2\n                          \n  )\n  data_oot4 <- na.omit(data_oot4);\n  ret <- gmmhmm2(dataset=data_oot4, ret_target=ret_zz500_d[index(data_oot4)], n_start=1500, n_state=5)\n}\n\ntest_oot5 <- function() {\n  source(\"gmmhmm.R\")\n  data_oot5 <- cbind.xts( TTR::ROC(zz500, n = 1),\n                          TTR::ROC(zz500, n = 2) / 2, \n                          TTR::ROC(hs300, n = 2) / 2,\n                          TTR::ROC(zz500, n = 5) / 5, \n                          TTR::ROC(zz500, n = 20)\n                          \n                          \n  )\n  data_oot5 <- na.omit(data_oot5);\n  ret <- gmmhmm2(dataset=data_oot5, ret_target=ret_zz500_d[index(data_oot5)], n_start=1500, n_state=5)\n}\n\n\ntest_oot3 <- function() {\n  source(\"gmmhmm.R\")\n  data_oot3 <- cbind.xts( TTR::ROC(zz500, n = 1),\n                          TTR::ROC(zz500, n = 2) / 2, \n                          TTR::ROC(hs300, n = 2) / 2\n                          \n  )\n  data_oot3 <- na.omit(data_oot3);\n  ret <- gmmhmm2(dataset=data_oot3, ret_target=ret_zz500_d[index(data_oot3)], n_start=1000, n_state=5)\n}\n\n\ntest_oot31 <- function() {\n  data_oot3 <- cbind.xts( ret_zz500_d,\n                          ret_zz500_5d, \n                          ret_zz500_20d\n                          \n  )\n  data_oot3 <- na.omit(data_oot3);\n  ret <- gmmhmm2(dataset=data_oot3, ret_target=ret_zz500_d[index(data_oot3)], n_start=1000, n_state=0)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntest_oot4 <- function() {\n  data_oot4 <- cbind.xts( ret_zz500_d,\n                          ret_hs300_d, \n                          ret_zz500_5d, )\n  data_oot4 <- na.omit(data_oot4);\n  ret <- gmmhmm(dataset = data_oot4, ret_target = ret_zz500_d[index(data_oot4)], n_start=1000, n_state = 5)\n  \n}\n\n\ntest_oot1 <- function() {\n  data_oot1 <- cbind.xts(zz500,\n                         zz500 - TTR::EMA(zz500, 2),\n                         zz500 - TTR::EMA(zz500, 5),\n                         TTR::RSI(zz500))\n                         #ret_zz500_5d - lag(ret_zz500_5d, 1),\n                         #ret_zz500_5d - lag(ret_zz500_5d, 5))\n  data_oot1 <- na.omit(data_oot1)\n  ret <- gmmhmm1(dataset = data_oot1, ret_target = ret_zz500_d[index(data_oot1)], n_start = 500, n_state = 5)\n}\n\ntest_oot2 <- function() {\n  data_oot2 <- cbind.xts(ret_zz500_w,  lag(ret_zz500_w, 1),\n                         ret_zz500_w_5d, lag(ret_zz500_w_5d, 1))\n  data_oot2 <- na.omit(data_oot2)\n  ret <- gmmhmm1(dataset = data_oot2, ret_target = data_oot2[, 1], n_start = 300, n_state = 3)\n }\n\ntest_oot2 <- function() {\n  data_oot2 <- cbind.xts(zz500, TTR::EMA(zz500, 2), TTR::EMA(zz500, 10))\n  data_oot2 <- na.omit(data_oot2)\n  ret <- gmmhmm(dataset = data_oot2, ret_target = ret_zz500_d[index(data_oot2)], \n                n_start = 500, n_state = 5)\n  \n}\n\ntest_oot1 <- function() {\n  \n  data_oot <- cbind.xts(benchmark_ret[, c(1, 2, 5)], lag(benchmark_ret[,1], 1), lag(benchmark_ret[, 1], 5));\n  data_oot <- na.omit(data_oot)\n  gmmhmm(dataset = data_oot, ret_target = benchmark_ret[, 1], n_start = 500, n_state = 3)\n}\n\ntest_oot2 <- function() {\n  ret_zz500 <- benchmark_ret[, 1]\n  ret_hs300 <- benchmark_ret[, 2]\n  ret_hengsheng <- benchmark_ret[, 5]\n  \n  ema2 <- TTR::EMA(benchmark[,1], 2);\n  ema5 <- TTR::EMA(benchmark[,1], 5);\n  data_oot <- cbind.xts(ret_zz500, ret_zz500 - ret_hs300, ret_zz500 - ret_hengsheng,\n                        Return.calculate(ema2),  Return.calculate(ema5),\n                        #           Return.calculate(TTR::EMA(benchmark[, 2]), 2),\n                        lag(ret_zz500, 1), lag(ret_zz500, 5));\n  data_oot <- na.omit(data_oot)\n  ret <- gmmhmm(dataset = data_oot, ret_target = benchmark_ret[, 1], n_start = 1000, n_state = 5)\n  write.csv(as.data.frame(ret), 'test_results/oot2.csv')\n}\n",
    "created" : 1446512215242.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1545331353",
    "id" : "2B73A94A",
    "lastKnownWriteTime" : 1446531750,
    "path" : "~/Documents/Research_Projects/Trading_Strategies/HMM_Timing/test_20151013.R",
    "project_path" : "test_20151013.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}